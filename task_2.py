# -*- coding: utf-8 -*-
"""Task 2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YioyFFWmOVS-_L6nRclBOPdZnXdHZxsb

Task 2

 Use a grouped bar chart to compare the average rating and total review count for the top 10 app categories by number of installs. Filter out any categories where the average rating is below 4.0 and size below 10 M and last update should be Jan month . this graph should work only between 3PM IST to 5 PM IST apart from that time we should not show this graph in dashboard itself.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')
import plotly.express as px
import plotly.graph_objects as go
import nltk
nltk.download('vader_lexicon')
from nltk.sentiment.vader import SentimentIntensityAnalyzer

store=pd.read_csv('/content/Play Store Data.csv')
review=pd.read_csv('/content/User Reviews.csv')

store.dropna(subset=['Rating'], inplace=True)
for i in store.columns:
  store[i]=store[i].fillna(store[i].mode()[0])

store['Last Updated']=pd.to_datetime(store['Last Updated'],errors='coerce')
store['Installs']=store['Installs'].str.replace(',','')
store['Installs']=store['Installs'].str.replace('+','')
store['Price']=store['Price'].str.replace('$','')
store['Installs']=pd.to_numeric(store['Installs'],errors='coerce')
store['Price']=pd.to_numeric(store['Price'],errors='coerce')

def convert_size(size):
    if 'M' in size:
        return float(size.replace('M', ''))
    elif 'k' in size:
        return float(size.replace('k', '')) / 1024

store['Size'] = store['Size'].apply(convert_size)

store=store[store['Rating']<=5]

review.dropna(subset=['Translated_Review'],inplace=True)

sia=SentimentIntensityAnalyzer()
review['Sentiment_Score']=review['Translated_Review'].apply(lambda x:sia.polarity_scores(x)['compound'])

merged_df=pd.merge(store,review,on='App',how='inner')

from datetime import datetime
import pytz

# Function to check if the current time is within the allowed time range
def is_within_time_window():
    ist = pytz.timezone('Asia/Kolkata')
    current_time = datetime.now(ist)
    return current_time.hour >= 15 and current_time.hour < 17

filtered_df = merged_df.copy()

# Apply the filtering conditions
filtered_df = filtered_df[
    (filtered_df['Rating'] <= 4.0) &
    (filtered_df['Size'] <= 10) &
    (pd.to_datetime(filtered_df['Last Updated']).dt.month == 1)]

# Group data to calculate average rating and total review count for top 10 categories by installs
top_categories = (
    filtered_df.groupby('Category')
    .agg({'Installs': 'sum', 'Rating': 'mean', 'Reviews': 'sum'})
    .sort_values(by='Installs', ascending=False)
    .head(10)
    .reset_index())

if is_within_time_window():

    fig = px.bar(
        top_categories.melt(id_vars='Category', value_vars=['Rating', 'Reviews']),
        x='Category',
        y='value',
        color='variable',
        barmode='group',
        title="Average Rating and Total Reviews for Top 10 App Categories",
        labels={'value': 'Value', 'variable': 'Metric'}
    )
    fig.update_layout(
        xaxis_title="App Categories",
        yaxis_title="Value",
        legend_title="Metrics",
        title_x=0.5
    )
    fig.show()
else:
    print("The graph can only be displayed between 3 PM and 5 PM IST.")

