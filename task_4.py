# -*- coding: utf-8 -*-
"""Task 4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gTeeQ3UuAKQ-uOn_04e2Nd_h-_2U7EGU

task 4

Create a violin plot to visualize the distribution of ratings for each app category, but only include categories with more than 50 apps and app name should contain letter “C” and exclude apps with fewer than 10 reviews and rating should be less 4.0. this graph should work only between 4 PM IST to 6 PM IST apart from that time we should not show this graph in dashboard itself.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')
import plotly.express as px
import plotly.graph_objects as go
import nltk
nltk.download('vader_lexicon')
from nltk.sentiment.vader import SentimentIntensityAnalyzer
from datetime import datetime
import pytz

store=pd.read_csv('/content/Play Store Data.csv')
review=pd.read_csv('/content/User Reviews.csv')

store.dropna(subset=['Rating'], inplace=True)
for i in store.columns:
  store[i]=store[i].fillna(store[i].mode()[0])

store['Last Updated']=pd.to_datetime(store['Last Updated'],errors='coerce')
store['Installs']=store['Installs'].str.replace(',','')
store['Installs']=store['Installs'].str.replace('+','')
store['Price']=store['Price'].str.replace('$','')
store['Installs']=pd.to_numeric(store['Installs'],errors='coerce')
store['Price']=pd.to_numeric(store['Price'],errors='coerce')

def convert_size(size):
    if 'M' in size:
        return float(size.replace('M', ''))
    elif 'k' in size:
        return float(size.replace('k', '')) / 1024

store['Size'] = store['Size'].apply(convert_size)

store=store[store['Rating']<=5]

review.dropna(subset=['Translated_Review'],inplace=True)

merged_df=pd.merge(store,review,on='App',how='inner')

def within_time_window():
    ist = pytz.timezone('Asia/Kolkata')
    current_time = datetime.now(ist).time()
    return current_time >= datetime.strptime('16:00:00', '%H:%M:%S').time() and current_time <= datetime.strptime('18:00:00', '%H:%M:%S').time()

if within_time_window():

    category_counts = merged_df['Category'].value_counts()
    valid_categories = category_counts[category_counts > 50].index
    violin_data = merged_df[merged_df['Category'].isin(valid_categories)]

    violin_data['Reviews'] = violin_data['Reviews'].astype(int)

    violin_data = violin_data[
        (violin_data['App'].str.contains('C', na=False)) &
        (violin_data['Rating'] < 4.0) &
        (violin_data['Reviews'] >= 10)
    ]

    violin_data = violin_data.drop_duplicates(subset=['App', 'Category'])


    fig = px.violin(
        violin_data,
        x='Category',
        y='Rating',
        color='Category',
        box=True,
        points='all'
    )

    fig.update_layout(
        title="Distribution of Ratings by App Category",
        xaxis_title="App Category",
        yaxis_title="Rating",
        legend_title="Category",
    )

    fig.show()
else:
    print("The visualization is not available outside the time window (4 PM to 6 PM IST).")