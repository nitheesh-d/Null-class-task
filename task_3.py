# -*- coding: utf-8 -*-
"""Task 3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sa_xxFZbTC9tBHGqFQb0vnhL86QYlkGC

task 3

Create a dual-axis chart comparing the average installs and revenue for free vs. paid apps within the top 3 app categories. Apply filters to exclude apps with fewer than 10,000 installs and revenue below $10,000 and android version should be more than 4.0 as well as size should be more than 15M and content rating should be Everyone and app name should not have more than 30 characters including space and special character .this graph should work only between 1 PM IST to 2 PM IST apart from that time we should not show this graph in dashboard itself
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')
import plotly.express as px
import plotly.graph_objects as go
import nltk
nltk.download('vader_lexicon')
from nltk.sentiment.vader import SentimentIntensityAnalyzer

store=pd.read_csv('/content/Play Store Data.csv')
review=pd.read_csv('/content/User Reviews.csv')

store.dropna(subset=['Rating'], inplace=True)
for i in store.columns:
  store[i]=store[i].fillna(store[i].mode()[0])

store['Last Updated']=pd.to_datetime(store['Last Updated'],errors='coerce')
store['Installs']=store['Installs'].str.replace(',','')
store['Installs']=store['Installs'].str.replace('+','')
store['Price']=store['Price'].str.replace('$','')
store['Installs']=pd.to_numeric(store['Installs'],errors='coerce')
store['Price']=pd.to_numeric(store['Price'],errors='coerce')

store['Revenue']=store['Price']*store['Installs']

def convert_size(size):
    if 'M' in size:
        return float(size.replace('M', ''))
    elif 'k' in size:
        return float(size.replace('k', '')) / 1024

store['Size'] = store['Size'].apply(convert_size)

store=store[store['Rating']<=5]

review.dropna(subset=['Translated_Review'],inplace=True)

merged_df=pd.merge(store,review,on='App',how='inner')

# Data Filtering
filtered_data = merged_df.copy()

# Apply the filtering conditions
filtered_data = filtered_data[
    (filtered_data['Installs'] >= 10000) &
    (filtered_data['Revenue'] >= 10000) &
    (filtered_data['Android Ver'].str.extract(r'(\d+\.\d+\.\d+|\d+\.\d+)')[0]
    .str.replace('.', '', 1)
    .astype(float) > 4.0).squeeze() &
    (filtered_data['Size'] > 15) &
    (filtered_data['Content Rating'] == 'Everyone') &
    (filtered_data['App'].str.len() <= 30)
]

# Determine the top 3 app categories by installs
top_categories = filtered_data.groupby('Category')['Installs'].sum().nlargest(3).index
filtered_data = filtered_data[filtered_data['Category'].isin(top_categories)]

# Group by Free vs. Paid and calculate average installs and revenue
aggregated_data = filtered_data.groupby(['Category', 'Type']).agg(
    Avg_Installs=('Installs', 'mean'),
    Avg_Revenue=('Revenue', 'mean')
).reset_index()

from datetime import datetime
import pytz

# Function to check if the current time is within the allowed time window
def is_in_time_window():
    ist = pytz.timezone('Asia/Kolkata')
    current_time = datetime.now(ist)
    return 13 <= current_time.hour < 14

# Check time and plot the graph
if is_in_time_window():
    # Create the dual-axis chart
    fig = go.Figure()

    # Add Average Installs as a bar chart
    for category in aggregated_data['Category'].unique():
        category_data = aggregated_data[aggregated_data['Category'] == category]
        fig.add_trace(go.Bar(
            x=category_data['Type'],
            y=category_data['Avg_Installs'],
            name=f"Avg Installs ({category})",
            yaxis="y1"
        ))

    # Add Average Revenue as a line chart
    for category in aggregated_data['Category'].unique():
        category_data = aggregated_data[aggregated_data['Category'] == category]
        fig.add_trace(go.Scatter(
            x=category_data['Type'],
            y=category_data['Avg_Revenue'],
            mode='lines+markers',
            name=f"Avg Revenue ({category})",
            yaxis="y2"
        ))

    # Update layout for dual axes
    fig.update_layout(
        title="Average Installs and Revenue (Free vs Paid) for Top 3 Categories",
        xaxis_title="App Type (Free vs Paid)",
        yaxis=dict(
            title="Average Installs",
            titlefont=dict(color="blue"),
            tickfont=dict(color="blue")
        ),
        yaxis2=dict(
            title="Average Revenue ($)",
            titlefont=dict(color="green"),
            tickfont=dict(color="green"),
            overlaying="y",
            side="right"
        ),
        legend_title="Metrics",
        barmode='group',
        title_x=0.5
    )

    # Show the plot
    fig.show()
else:
    print("The graph can only be displayed between 1 PM and 2 PM IST.")

