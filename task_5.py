# -*- coding: utf-8 -*-
"""Task 5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1t1ewvpNSDTKcgrA17odi6BvhxEYBlWDg

task 5

Plot a time series line chart to show the trend of total installs over time, segmented by app category. Highlight periods of significant growth by shading the areas under the curve where the increase in installs exceeds 20% month-over-month and content rating should be teen and app name should start with letter ‘E’ and installs should be more than 10k as well as this graph should work only between 6 PM IST to 9 PM IST apart from that time we should not show this graph in dashboard itself.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')
import plotly.express as px
import plotly.graph_objects as go
import nltk
nltk.download('vader_lexicon')
from nltk.sentiment.vader import SentimentIntensityAnalyzer

store=pd.read_csv('/content/Play Store Data.csv')
review=pd.read_csv('/content/User Reviews.csv')

store.dropna(subset=['Rating'], inplace=True)
for i in store.columns:
  store[i]=store[i].fillna(store[i].mode()[0])

store['Last Updated']=pd.to_datetime(store['Last Updated'],errors='coerce')
store['Installs']=store['Installs'].str.replace(',','')
store['Installs']=store['Installs'].str.replace('+','')
store['Price']=store['Price'].str.replace('$','')
store['Installs']=pd.to_numeric(store['Installs'],errors='coerce')
store['Price']=pd.to_numeric(store['Price'],errors='coerce')

def convert_size(size):
    if 'M' in size:
        return float(size.replace('M', ''))
    elif 'k' in size:
        return float(size.replace('k', '')) / 1024

store['Size'] = store['Size'].apply(convert_size)

store=store[store['Rating']<=5]

review.dropna(subset=['Translated_Review'],inplace=True)

merged_df=pd.merge(store,review,on='App',how='inner')

merged_df

import plotly.graph_objects as go
from datetime import datetime
import pytz

def within_time_window():
    ist = pytz.timezone('Asia/Kolkata')
    current_time = datetime.now(ist).time()
    return current_time >= datetime.strptime('18:00:00', '%H:%M:%S').time() and current_time <= datetime.strptime('21:00:00', '%H:%M:%S').time()

if within_time_window():
    # Filtering Data
    filtered_data = merged_df[
        (merged_df['Content Rating'] == 'Teen') &
        (merged_df['App'].str.startswith('E')) &
        (merged_df['Installs'] > 10000)
    ]

    # Ensure 'Last Updated' is datetime
    filtered_data['Last Updated'] = pd.to_datetime(filtered_data['Last Updated'])

    # Aggregate installs by month and category
    filtered_data['Month'] = filtered_data['Last Updated'].dt.to_period('M')
    installs_by_month = filtered_data.groupby(['Month', 'Category'])['Installs'].sum().reset_index()
    installs_by_month['Month'] = installs_by_month['Month'].dt.to_timestamp()

    # Calculate month-over-month growth
    installs_by_month['Growth'] = installs_by_month.groupby('Category')['Installs'].pct_change() * 100
    installs_by_month['Significant Growth'] = installs_by_month['Growth'] > 20

    # Plotting
    fig = go.Figure()

    for category in installs_by_month['Category'].unique():
        category_data = installs_by_month[installs_by_month['Category'] == category]
        fig.add_trace(
            go.Scatter(
                x=category_data['Month'],
                y=category_data['Installs'],
                mode='lines',
                name=category,
                line=dict(width=2)
            )
        )

        # Highlight significant growth periods
        significant_growth = category_data[category_data['Significant Growth']]
        for _, row in significant_growth.iterrows():
            fig.add_shape(
                type='rect',
                x0=row['Month'] - pd.Timedelta(days=15),
                x1=row['Month'] + pd.Timedelta(days=15),
                y0=0,
                y1=row['Installs'],
                fillcolor='rgba(255, 0, 0, 0.2)',
                line=dict(width=0),
                layer='below'
            )

    # Customize Layout
    fig.update_layout(
        title="Total Installs Over Time by App Category",
        xaxis_title="Month",
        yaxis_title="Total Installs",
        legend_title="App Category",
        template="plotly_white",
        xaxis=dict(tickformat="%b %Y")
    )

    fig.show()
else:
    print("The visualization is not available outside the time window (6 PM to 9 PM IST).")

e=merged_df[merged_df['App'].str.startswith('E')]
e

filtered_data.shape

