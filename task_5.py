# -*- coding: utf-8 -*-
"""Task 5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1t1ewvpNSDTKcgrA17odi6BvhxEYBlWDg

task 5

Plot a time series line chart to show the trend of total installs over time, segmented by app category. Highlight periods of significant growth by shading the areas under the curve where the increase in installs exceeds 20% month-over-month and content rating should be teen and app name should start with letter ‘E’ and installs should be more than 10k as well as this graph should work only between 6 PM IST to 9 PM IST apart from that time we should not show this graph in dashboard itself.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')
import plotly.express as px
import plotly.graph_objects as go
import nltk
nltk.download('vader_lexicon')
from nltk.sentiment.vader import SentimentIntensityAnalyzer

store=pd.read_csv('/content/Play Store Data.csv')
review=pd.read_csv('/content/User Reviews.csv')

store.dropna(subset=['Rating'], inplace=True)
for i in store.columns:
  store[i]=store[i].fillna(store[i].mode()[0])

store['Last Updated']=pd.to_datetime(store['Last Updated'],errors='coerce')
store['Installs']=store['Installs'].str.replace(',','')
store['Installs']=store['Installs'].str.replace('+','')
store['Price']=store['Price'].str.replace('$','')
store['Installs']=pd.to_numeric(store['Installs'],errors='coerce')
store['Price']=pd.to_numeric(store['Price'],errors='coerce')

store['Revenue']=store['Price']*store['Installs']

def convert_size(size):
    if 'M' in size:
        return float(size.replace('M', ''))
    elif 'k' in size:
        return float(size.replace('k', '')) / 1024

store['Size'] = store['Size'].apply(convert_size)

store=store[store['Rating']<=5]

review.dropna(subset=['Translated_Review'],inplace=True)

merged_df=pd.merge(store,review,on='App',how='inner')

import pandas as pd
import plotly.graph_objects as go
from datetime import datetime
import pytz

# Function to check if the current time is within the allowed range (6 PM to 9 PM IST)
def is_within_time_range(start_time_str="18:00", end_time_str="21:00", timezone="Asia/Kolkata"):
    current_time = datetime.now(pytz.timezone(timezone)).time()
    start_time = datetime.strptime(start_time_str, "%H:%M").time()
    end_time = datetime.strptime(end_time_str, "%H:%M").time()
    return start_time <= current_time <= end_time

# Check if the current time is within the allowed range (6 PM to 9 PM IST)
if is_within_time_range():

    # Filter the dataset based on the conditions
    filtered_df = merged_df[
        (merged_df['Content Rating'] == 'Teen') &            # Content rating is Teen
        (merged_df['App'].str.startswith('E')) &            # App name starts with 'E'
        (merged_df['Installs'] > 10000)                     # Installs > 10k
    ]

    # Ensure 'Last Updated' is in datetime format
    filtered_df['Last Updated'] = pd.to_datetime(filtered_df['Last Updated'])

    # Group data by month and category to calculate total installs
    filtered_df['Month'] = filtered_df['Last Updated'].dt.to_period('M')  # Convert to monthly periods
    grouped_df = filtered_df.groupby(['Month', 'Category'])['Installs'].sum().reset_index()

    # Calculate month-over-month growth
    grouped_df['MoM Growth'] = grouped_df.groupby('Category')['Installs'].pct_change() * 100

    # Create a line chart
    fig = go.Figure()

    # Add a line for each category
    categories = grouped_df['Category'].unique()
    for category in categories:
        category_data = grouped_df[grouped_df['Category'] == category]
        fig.add_trace(go.Scatter(
            x=category_data['Month'].astype(str),  # Convert Period to string
            y=category_data['Installs'],
            mode='lines+markers',
            name=f'{category} Installs'
        ))

        # Highlight periods with significant growth (>20% MoM)
        significant_growth = category_data[category_data['MoM Growth'] > 20]
        if not significant_growth.empty:
            fig.add_trace(go.Scatter(
                x=significant_growth['Month'].astype(str),
                y=significant_growth['Installs'],
                mode='markers',
                marker=dict(size=10, color='red', symbol='circle'),
                name=f'{category} Growth > 20%'
            ))

    # Customize layout
    fig.update_layout(
        title="Trend of Total Installs Over Time (Segmented by App Category)",
        xaxis_title="Month",
        yaxis_title="Total Installs",
        template="plotly_white",
        width=900,
        height=600,
        legend_title="App Category",
    )

    # Show the figure
    fig.show()

else:
    print("The graph is available between 6 PM IST to 9 PM IST.")

