# -*- coding: utf-8 -*-
"""Task 1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pfBU3FpWtLjMhDQqvxkz8MYG8enZx18u

task:1

Visualize the sentiment distribution (positive, neutral, negative) of user reviews using a stacked bar chart, segmented by rating groups (e.g., 1-2 stars, 3-4 stars, 4-5 stars). Include only apps with more than 1,000 reviews and group by the top 5 categories.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')
import plotly.express as px
import plotly.graph_objects as go
import nltk
nltk.download('vader_lexicon')
from nltk.sentiment.vader import SentimentIntensityAnalyzer

store=pd.read_csv('/content/Play Store Data.csv')
store.head()

review=pd.read_csv('/content/User Reviews.csv')
review.head()

store.dropna(subset=['Rating'], inplace=True)
for i in store.columns:
  store[i]=store[i].fillna(store[i].mode()[0])

store['Last Updated']=pd.to_datetime(store['Last Updated'],errors='coerce')
store['Installs']=store['Installs'].str.replace(',','')
store['Installs']=store['Installs'].str.replace('+','')
store['Price']=store['Price'].str.replace('$','')
store['Installs']=pd.to_numeric(store['Installs'],errors='coerce')
store['Price']=pd.to_numeric(store['Price'],errors='coerce')

def convert_size(size):
    if 'M' in size:
        return float(size.replace('M', ''))
    elif 'k' in size:
        return float(size.replace('k', '')) / 1024

store['Size'] = store['Size'].apply(convert_size)

store=store[store['Rating']<=5]

def categorize_rating(rating):
    if rating <= 2:
        return '1-2 stars'
    elif rating <= 4:
        return '3-4 stars'
    else:
        return '4-5 stars'

store['Rating_group'] = store['Rating'].apply(categorize_rating)

store['Revenue']=store['Price']*store['Installs']

review.dropna(subset=['Translated_Review'],inplace=True)

sia=SentimentIntensityAnalyzer()
review['Sentiment_Score']=review['Translated_Review'].apply(lambda x:sia.polarity_scores(x)['compound'])

merged_df=pd.merge(store,review,on='App',how='inner')
merged_df.head()

merged_df['Reviews']=merged_df['Reviews'].astype(int)

# Filter apps with more than 1,000 reviews
filtered_df = merged_df[merged_df['Reviews'] > 1000]

# Select the top 5 categories
top_categories = filtered_df['Category'].value_counts().nlargest(5).index
filtered_df = filtered_df[filtered_df['Category'].isin(top_categories)]

# Create rating groups
bins = [0, 2, 4, 5]
labels = ['1-2 stars', '3-4 stars', '4-5 stars']
filtered_df['Rating_group'] = pd.cut(filtered_df['Rating'], bins=bins, labels=labels, include_lowest=True)

# Aggregate sentiment counts
sentiment_counts = filtered_df.groupby(['Category', 'Rating_group', 'Sentiment']).size().reset_index(name='Count')

# Create a stacked bar chart using Plotly
fig = px.bar(
    sentiment_counts,
    x='Rating_group',
    y='Count',
    color='Sentiment',
    facet_row='Category',
    title="Sentiment Distribution by Rating Groups (Top 5 Categories)",
    labels={'Rating_group': 'Rating Group', 'Count': 'Sentiment Count'},
    height=1200,
)

# Customize layout
fig.update_layout(barmode='stack', legend_title_text='Sentiment', title_x=0.5)
fig.update_yaxes(title_text='Sentiment Count')
fig.update_xaxes(title_text='Rating Group')

# Show plot
fig.show()

